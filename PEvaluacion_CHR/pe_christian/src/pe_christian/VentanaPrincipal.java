
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package pe_christian;
import java.awt.BasicStroke;
import javax.swing.JFileChooser;
import java.io.File;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.media.Player;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.chr.imagen.OpCaC;
import sm.chr.imagen.OpPaP;
import sm.chr.imagen.SepiaOp;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.TintOp;
import sm.sound.SMClipPlayer;
import sm.sound.SMSoundRecorder;

/**
 *
 * @author Chris
 */

public class VentanaPrincipal extends javax.swing.JFrame {
    
    //ATRIBUTOS
     private BufferedImage imagen_original;
     private Color color_asignado;
     
     // TAMAÑO APLICACIÓN
     public int tam_alto = 1200;
     public int tam_ancho = 800;
     // TAMAÑO LIENZO BLANCO
     public int lienzo_altura = 800;
     public int lienzo_anchura = 400;
     
     private SMClipPlayer player = null;
     private SMSoundRecorder recorder;
     private File audio_temporal;
    

    /**
     * Creates new form VentanaPrincipal
     */
     
    public VentanaPrincipal() {
        initComponents();
    }
    
    public VentanaInterna getVentanaInterna(){
        VentanaInterna vi;
        vi = (VentanaInterna)escritorio.getSelectedFrame();
        return vi;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        DialogoCambioTamaño = new javax.swing.JDialog();
        EntradaAncho = new javax.swing.JTextField();
        EntradaAlto = new javax.swing.JTextField();
        label3 = new java.awt.Label();
        label4 = new java.awt.Label();
        botonCancelar = new javax.swing.JButton();
        botonCambiar = new javax.swing.JButton();
        DialogoInfo = new javax.swing.JDialog();
        label1 = new java.awt.Label();
        botonCerrar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonGroup2 = new javax.swing.ButtonGroup();
        BarraHerramientas = new javax.swing.JToolBar();
        nuevoDibujo = new javax.swing.JButton();
        abrirDibujo = new javax.swing.JButton();
        guardarDibujo = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        BotonDibujarPunto = new javax.swing.JToggleButton();
        BotonDibujarLinea = new javax.swing.JToggleButton();
        BotonDibujarRectangulo = new javax.swing.JToggleButton();
        BotonDibujarElipse = new javax.swing.JToggleButton();
        BotonCurva = new javax.swing.JToggleButton();
        BotonGP = new javax.swing.JToggleButton();
        BotonRotoDos = new javax.swing.JToggleButton();
        botonEditar = new javax.swing.JToggleButton();
        jSeparator15 = new javax.swing.JToolBar.Separator();
        botonDelante = new javax.swing.JButton();
        jSeparator14 = new javax.swing.JToolBar.Separator();
        botonFirst = new javax.swing.JButton();
        jSeparator13 = new javax.swing.JToolBar.Separator();
        botonLast = new javax.swing.JButton();
        jSeparator12 = new javax.swing.JToolBar.Separator();
        botonAbajo = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        medidorGrosor = new javax.swing.JSpinner();
        botonRelleno = new javax.swing.JToggleButton();
        botonTransparencia = new javax.swing.JToggleButton();
        botonAlisar = new javax.swing.JToggleButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        botonPlay = new javax.swing.JButton();
        botonStop = new javax.swing.JButton();
        listaReproduccion = new javax.swing.JComboBox<>();
        botonGrabar = new javax.swing.JToggleButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        botonWebCam = new javax.swing.JButton();
        botonCapturar = new javax.swing.JButton();
        PanelColoresEstado = new javax.swing.JPanel();
        PanelXY = new javax.swing.JLabel();
        PanelOpciones = new javax.swing.JPanel();
        subPanelColores = new javax.swing.JPanel();
        BotonNegro = new javax.swing.JToggleButton();
        BotonBlanco = new javax.swing.JToggleButton();
        BotonAmarillo = new javax.swing.JToggleButton();
        BotonVerde = new javax.swing.JToggleButton();
        BotonRojo = new javax.swing.JToggleButton();
        BotonAzul = new javax.swing.JToggleButton();
        subPanelBrillo = new javax.swing.JPanel();
        sliderBrillo = new javax.swing.JSlider();
        subPanelFiltros = new javax.swing.JPanel();
        menuFiltros = new javax.swing.JComboBox<>();
        subPanelContraste = new javax.swing.JPanel();
        botonContraste = new javax.swing.JButton();
        botonIluminar = new javax.swing.JButton();
        botonOscurecer = new javax.swing.JButton();
        subPanelOperaciones = new javax.swing.JPanel();
        botonSinusoidal = new javax.swing.JButton();
        botonSepia = new javax.swing.JButton();
        botonNegativo = new javax.swing.JButton();
        botonTetrico = new javax.swing.JButton();
        botonOpCaC = new javax.swing.JButton();
        botonOpPaP = new javax.swing.JButton();
        botonTintado = new javax.swing.JButton();
        botonEcualizacion = new javax.swing.JButton();
        subPanelColor = new javax.swing.JPanel();
        botonBandas = new javax.swing.JButton();
        menuEspacioColor = new javax.swing.JComboBox<>();
        subPanelRotacion = new javax.swing.JPanel();
        sliderRotacion = new javax.swing.JSlider();
        boton90 = new javax.swing.JButton();
        boton180 = new javax.swing.JButton();
        boton270 = new javax.swing.JButton();
        subPanelEscala = new javax.swing.JPanel();
        botonMas = new javax.swing.JButton();
        botonMenos = new javax.swing.JButton();
        PanelEstado = new javax.swing.JLabel();
        escritorio = new javax.swing.JDesktopPane();
        BarraMenu = new javax.swing.JMenuBar();
        ArchivoMenu = new javax.swing.JMenu();
        NuevoArchivoMenu = new javax.swing.JMenuItem();
        AbrirArchivoMenu = new javax.swing.JMenuItem();
        GuardarArchivoMenu = new javax.swing.JMenuItem();
        AcercaMenu = new javax.swing.JMenuItem();
        MusicaMenu = new javax.swing.JMenu();
        GrabarAudioMenu = new javax.swing.JMenuItem();
        VideoMenu = new javax.swing.JMenu();
        AbrirVideoMenu = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        EdicionMenu = new javax.swing.JMenu();
        EstadoEdicionMenu = new javax.swing.JCheckBoxMenuItem();
        FormasEdicionMenu = new javax.swing.JCheckBoxMenuItem();
        AtributosEdicionMenu = new javax.swing.JCheckBoxMenuItem();
        ImagenMenu = new javax.swing.JMenu();
        tamañoImagenMenu = new javax.swing.JMenuItem();
        DuplicaImagenMenu = new javax.swing.JMenuItem();

        DialogoCambioTamaño.setMinimumSize(new java.awt.Dimension(500, 150));
        DialogoCambioTamaño.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        EntradaAncho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EntradaAnchoActionPerformed(evt);
            }
        });
        DialogoCambioTamaño.getContentPane().add(EntradaAncho, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 20, 90, -1));

        EntradaAlto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EntradaAltoActionPerformed(evt);
            }
        });
        DialogoCambioTamaño.getContentPane().add(EntradaAlto, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 60, 90, -1));

        label3.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 12)); // NOI18N
        label3.setText("Ancho");
        DialogoCambioTamaño.getContentPane().add(label3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        label4.setFont(new java.awt.Font("DejaVu Serif Condensed", 1, 12)); // NOI18N
        label4.setText("Alto");
        DialogoCambioTamaño.getContentPane().add(label4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        botonCancelar.setText("Volver");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });
        DialogoCambioTamaño.getContentPane().add(botonCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, 100, 60));

        botonCambiar.setText("Redimensionar");
        botonCambiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCambiarActionPerformed(evt);
            }
        });
        DialogoCambioTamaño.getContentPane().add(botonCambiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, -1, 60));

        DialogoInfo.setTitle("Acerca de ...");
        DialogoInfo.setBackground(new java.awt.Color(255, 153, 0));
        DialogoInfo.setMinimumSize(new java.awt.Dimension(524, 175));
        DialogoInfo.setUndecorated(true);

        label1.setFont(new java.awt.Font("Rockwell", 1, 24)); // NOI18N
        label1.setForeground(new java.awt.Color(255, 0, 0));
        label1.setText("PRÁCTICAS DE SISTEMAS MULTIMEDIAS");

        botonCerrar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        botonCerrar.setText("Cerrar");
        botonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCerrarActionPerformed(evt);
            }
        });

        jLabel2.setText("Christian Andrades Molina");

        jLabel3.setText("MultimediaSM 2.0");

        javax.swing.GroupLayout DialogoInfoLayout = new javax.swing.GroupLayout(DialogoInfo.getContentPane());
        DialogoInfo.getContentPane().setLayout(DialogoInfoLayout);
        DialogoInfoLayout.setHorizontalGroup(
            DialogoInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogoInfoLayout.createSequentialGroup()
                .addGroup(DialogoInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DialogoInfoLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DialogoInfoLayout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(botonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(DialogoInfoLayout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(jLabel3))
                    .addGroup(DialogoInfoLayout.createSequentialGroup()
                        .addGap(188, 188, 188)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        DialogoInfoLayout.setVerticalGroup(
            DialogoInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DialogoInfoLayout.createSequentialGroup()
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                .addComponent(botonCerrar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MultimediaSM 2.0");
        setPreferredSize(new java.awt.Dimension(1200, 800));

        BarraHerramientas.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BarraHerramientas.setRollover(true);
        BarraHerramientas.setToolTipText("Barra de dibujo");
        BarraHerramientas.setAlignmentY(0.4827586F);
        BarraHerramientas.setMaximumSize(new java.awt.Dimension(129, 31));
        BarraHerramientas.setMinimumSize(new java.awt.Dimension(129, 31));
        BarraHerramientas.setPreferredSize(new java.awt.Dimension(129, 41));

        nuevoDibujo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/nuevo.png"))); // NOI18N
        nuevoDibujo.setToolTipText("Nuevo dibujo");
        nuevoDibujo.setFocusable(false);
        nuevoDibujo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nuevoDibujo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nuevoDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoDibujoActionPerformed(evt);
            }
        });
        BarraHerramientas.add(nuevoDibujo);

        abrirDibujo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/abrir.png"))); // NOI18N
        abrirDibujo.setToolTipText("Abrir dibujo");
        abrirDibujo.setFocusable(false);
        abrirDibujo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrirDibujo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrirDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirDibujoActionPerformed(evt);
            }
        });
        BarraHerramientas.add(abrirDibujo);

        guardarDibujo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/guardar.png"))); // NOI18N
        guardarDibujo.setToolTipText("Guardar dibujo");
        guardarDibujo.setFocusable(false);
        guardarDibujo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardarDibujo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardarDibujo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarDibujoActionPerformed(evt);
            }
        });
        BarraHerramientas.add(guardarDibujo);
        BarraHerramientas.add(jSeparator1);
        BarraHerramientas.add(jSeparator10);

        buttonGroup1.add(BotonDibujarPunto);
        BotonDibujarPunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/punto.png"))); // NOI18N
        BotonDibujarPunto.setToolTipText("Dibuja puntos");
        BotonDibujarPunto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonDibujarPunto.setFocusable(false);
        BotonDibujarPunto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonDibujarPunto.setMaximumSize(new java.awt.Dimension(29, 29));
        BotonDibujarPunto.setMinimumSize(new java.awt.Dimension(29, 29));
        BotonDibujarPunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonDibujarPuntoActionPerformed(evt);
            }
        });
        BarraHerramientas.add(BotonDibujarPunto);
        BotonDibujarPunto.getAccessibleContext().setAccessibleDescription("Punto");

        buttonGroup1.add(BotonDibujarLinea);
        BotonDibujarLinea.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/linea.png"))); // NOI18N
        BotonDibujarLinea.setToolTipText("Dibuja líneas");
        BotonDibujarLinea.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonDibujarLinea.setFocusable(false);
        BotonDibujarLinea.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonDibujarLinea.setMaximumSize(new java.awt.Dimension(29, 29));
        BotonDibujarLinea.setMinimumSize(new java.awt.Dimension(29, 29));
        BotonDibujarLinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonDibujarLineaActionPerformed(evt);
            }
        });
        BarraHerramientas.add(BotonDibujarLinea);

        buttonGroup1.add(BotonDibujarRectangulo);
        BotonDibujarRectangulo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/rectangulo.png"))); // NOI18N
        BotonDibujarRectangulo.setToolTipText("Dibuja rectángulos");
        BotonDibujarRectangulo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonDibujarRectangulo.setFocusable(false);
        BotonDibujarRectangulo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonDibujarRectangulo.setMaximumSize(new java.awt.Dimension(29, 29));
        BotonDibujarRectangulo.setMinimumSize(new java.awt.Dimension(29, 29));
        BotonDibujarRectangulo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonDibujarRectanguloActionPerformed(evt);
            }
        });
        BarraHerramientas.add(BotonDibujarRectangulo);

        buttonGroup1.add(BotonDibujarElipse);
        BotonDibujarElipse.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/elipse.png"))); // NOI18N
        BotonDibujarElipse.setToolTipText("Dibuja elipses");
        BotonDibujarElipse.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonDibujarElipse.setFocusable(false);
        BotonDibujarElipse.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonDibujarElipse.setMaximumSize(new java.awt.Dimension(31, 31));
        BotonDibujarElipse.setMinimumSize(new java.awt.Dimension(31, 31));
        BotonDibujarElipse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonDibujarElipseActionPerformed(evt);
            }
        });
        BarraHerramientas.add(BotonDibujarElipse);

        buttonGroup1.add(BotonCurva);
        BotonCurva.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/icons8-left-3-filled-25.png"))); // NOI18N
        BotonCurva.setFocusable(false);
        BotonCurva.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonCurva.setMaximumSize(new java.awt.Dimension(31, 31));
        BotonCurva.setMinimumSize(new java.awt.Dimension(31, 31));
        BotonCurva.setPreferredSize(new java.awt.Dimension(31, 31));
        BotonCurva.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonCurva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonCurvaActionPerformed(evt);
            }
        });
        BarraHerramientas.add(BotonCurva);

        buttonGroup1.add(BotonGP);
        BotonGP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/Lapiz.gif"))); // NOI18N
        BotonGP.setFocusable(false);
        BotonGP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonGP.setMaximumSize(new java.awt.Dimension(31, 31));
        BotonGP.setMinimumSize(new java.awt.Dimension(31, 31));
        BotonGP.setPreferredSize(new java.awt.Dimension(31, 31));
        BotonGP.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonGP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonGPActionPerformed(evt);
            }
        });
        BarraHerramientas.add(BotonGP);

        buttonGroup1.add(BotonRotoDos);
        BotonRotoDos.setFocusable(false);
        BotonRotoDos.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BotonRotoDos.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        BotonRotoDos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRotoDosActionPerformed(evt);
            }
        });
        BarraHerramientas.add(BotonRotoDos);

        botonEditar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/seleccion.png"))); // NOI18N
        botonEditar.setToolTipText("Modo edición");
        botonEditar.setFocusable(false);
        botonEditar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonEditar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEditarActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonEditar);
        BarraHerramientas.add(jSeparator15);

        botonDelante.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/if_444-Arrow_Left_2124440.png"))); // NOI18N
        botonDelante.setToolTipText("Delante");
        botonDelante.setFocusable(false);
        botonDelante.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonDelante.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonDelante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDelanteActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonDelante);
        BarraHerramientas.add(jSeparator14);

        botonFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/if_441-Arrow_up_2124450.png"))); // NOI18N
        botonFirst.setToolTipText("Traer al frente");
        botonFirst.setFocusable(false);
        botonFirst.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonFirst.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonFirstActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonFirst);
        BarraHerramientas.add(jSeparator13);

        botonLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/if_442-Arrow_down_2124471.png"))); // NOI18N
        botonLast.setToolTipText("Llevar al fondo");
        botonLast.setFocusable(false);
        botonLast.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonLast.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLastActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonLast);
        BarraHerramientas.add(jSeparator12);

        botonAbajo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/if_443-Arrow_Right_2124484.png"))); // NOI18N
        botonAbajo.setToolTipText("Atrás");
        botonAbajo.setFocusable(false);
        botonAbajo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAbajo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAbajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAbajoActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonAbajo);
        BarraHerramientas.add(jSeparator11);

        medidorGrosor.setToolTipText("Modifica el grosor");
        medidorGrosor.setMaximumSize(new java.awt.Dimension(60, 20));
        medidorGrosor.setPreferredSize(new java.awt.Dimension(60, 30));
        medidorGrosor.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                medidorGrosorStateChanged(evt);
            }
        });
        BarraHerramientas.add(medidorGrosor);

        botonRelleno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/rellenar.png"))); // NOI18N
        botonRelleno.setToolTipText("Aplica relleno");
        botonRelleno.setFocusable(false);
        botonRelleno.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonRelleno.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRellenoActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonRelleno);

        botonTransparencia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/transparencia.png"))); // NOI18N
        botonTransparencia.setToolTipText("Aplica transparencia");
        botonTransparencia.setFocusable(false);
        botonTransparencia.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonTransparencia.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonTransparencia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTransparenciaActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonTransparencia);

        botonAlisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/alisar.png"))); // NOI18N
        botonAlisar.setToolTipText("Aplica alisado");
        botonAlisar.setFocusable(false);
        botonAlisar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonAlisar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonAlisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAlisarActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonAlisar);
        BarraHerramientas.add(jSeparator4);
        BarraHerramientas.add(jSeparator5);
        BarraHerramientas.add(jSeparator6);

        botonPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/play24x24.png"))); // NOI18N
        botonPlay.setToolTipText("START");
        botonPlay.setFocusable(false);
        botonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonPlay.setMaximumSize(new java.awt.Dimension(30, 30));
        botonPlay.setMinimumSize(new java.awt.Dimension(30, 30));
        botonPlay.setPreferredSize(new java.awt.Dimension(30, 30));
        botonPlay.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonPlayActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonPlay);

        botonStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/stop24x24.png"))); // NOI18N
        botonStop.setToolTipText("STOP");
        botonStop.setFocusable(false);
        botonStop.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonStop.setMaximumSize(new java.awt.Dimension(30, 30));
        botonStop.setMinimumSize(new java.awt.Dimension(30, 30));
        botonStop.setPreferredSize(new java.awt.Dimension(30, 30));
        botonStop.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonStopActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonStop);

        listaReproduccion.setToolTipText("Lista de reproduccion");
        listaReproduccion.setMaximumSize(new java.awt.Dimension(210, 30));
        listaReproduccion.setMinimumSize(new java.awt.Dimension(210, 30));
        listaReproduccion.setPreferredSize(new java.awt.Dimension(210, 30));
        listaReproduccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaReproduccionActionPerformed(evt);
            }
        });
        BarraHerramientas.add(listaReproduccion);

        botonGrabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/record24x24.png"))); // NOI18N
        botonGrabar.setToolTipText("Grabar");
        botonGrabar.setFocusable(false);
        botonGrabar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonGrabar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGrabarActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonGrabar);
        BarraHerramientas.add(jSeparator7);
        BarraHerramientas.add(jSeparator8);
        BarraHerramientas.add(jSeparator9);

        botonWebCam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/Camara.png"))); // NOI18N
        botonWebCam.setToolTipText("WebCam");
        botonWebCam.setFocusable(false);
        botonWebCam.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonWebCam.setMaximumSize(new java.awt.Dimension(30, 30));
        botonWebCam.setMinimumSize(new java.awt.Dimension(30, 30));
        botonWebCam.setPreferredSize(new java.awt.Dimension(30, 30));
        botonWebCam.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonWebCam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonWebCamActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonWebCam);

        botonCapturar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/Capturar.png"))); // NOI18N
        botonCapturar.setToolTipText("Capturar pantalla");
        botonCapturar.setFocusable(false);
        botonCapturar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        botonCapturar.setMaximumSize(new java.awt.Dimension(30, 30));
        botonCapturar.setMinimumSize(new java.awt.Dimension(30, 30));
        botonCapturar.setPreferredSize(new java.awt.Dimension(30, 30));
        botonCapturar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        botonCapturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCapturarActionPerformed(evt);
            }
        });
        BarraHerramientas.add(botonCapturar);

        getContentPane().add(BarraHerramientas, java.awt.BorderLayout.PAGE_START);

        PanelColoresEstado.setMinimumSize(new java.awt.Dimension(355, 122));
        PanelColoresEstado.setPreferredSize(new java.awt.Dimension(466, 122));
        PanelColoresEstado.setLayout(new java.awt.BorderLayout());

        PanelXY.setBackground(new java.awt.Color(255, 255, 255));
        PanelXY.setFont(new java.awt.Font("Segoe UI Symbol", 1, 11)); // NOI18N
        PanelXY.setForeground(new java.awt.Color(0, 0, 204));
        PanelXY.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        PanelXY.setText("Posición");
        PanelXY.setToolTipText("Posición del cursor");
        PanelXY.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PanelXY.setMaximumSize(new java.awt.Dimension(23, 17));
        PanelXY.setMinimumSize(new java.awt.Dimension(23, 17));
        PanelXY.setPreferredSize(new java.awt.Dimension(23, 17));
        PanelColoresEstado.add(PanelXY, java.awt.BorderLayout.NORTH);

        PanelOpciones.setToolTipText("Barra de herramientas");
        PanelOpciones.setMaximumSize(new java.awt.Dimension(651, 128));
        PanelOpciones.setMinimumSize(new java.awt.Dimension(651, 128));
        PanelOpciones.setPreferredSize(new java.awt.Dimension(651, 128));
        java.awt.FlowLayout flowLayout1 = new java.awt.FlowLayout(java.awt.FlowLayout.LEADING, 1, 5);
        flowLayout1.setAlignOnBaseline(true);
        PanelOpciones.setLayout(flowLayout1);

        subPanelColores.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Colores", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N
        subPanelColores.setToolTipText("Colores");
        subPanelColores.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        subPanelColores.setMinimumSize(new java.awt.Dimension(200, 92));
        subPanelColores.setPreferredSize(new java.awt.Dimension(120, 80));
        subPanelColores.setRequestFocusEnabled(false);
        java.awt.FlowLayout flowLayout3 = new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 3, 3);
        flowLayout3.setAlignOnBaseline(true);
        subPanelColores.setLayout(flowLayout3);

        BotonNegro.setBackground(new java.awt.Color(0, 0, 0));
        buttonGroup2.add(BotonNegro);
        BotonNegro.setToolTipText("Negro");
        BotonNegro.setBorder(null);
        BotonNegro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonNegro.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BotonNegro.setMargin(new java.awt.Insets(0, 0, 0, 0));
        BotonNegro.setPreferredSize(new java.awt.Dimension(25, 25));
        BotonNegro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonNegroActionPerformed(evt);
            }
        });
        subPanelColores.add(BotonNegro);

        BotonBlanco.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(BotonBlanco);
        BotonBlanco.setForeground(new java.awt.Color(255, 255, 255));
        BotonBlanco.setToolTipText("Blanco");
        BotonBlanco.setBorder(null);
        BotonBlanco.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonBlanco.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BotonBlanco.setMargin(new java.awt.Insets(0, 0, 0, 0));
        BotonBlanco.setPreferredSize(new java.awt.Dimension(25, 25));
        BotonBlanco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonBlancoActionPerformed(evt);
            }
        });
        subPanelColores.add(BotonBlanco);

        BotonAmarillo.setBackground(new java.awt.Color(255, 255, 0));
        buttonGroup2.add(BotonAmarillo);
        BotonAmarillo.setForeground(new java.awt.Color(255, 255, 0));
        BotonAmarillo.setToolTipText("Amarillo");
        BotonAmarillo.setBorder(null);
        BotonAmarillo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonAmarillo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BotonAmarillo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        BotonAmarillo.setPreferredSize(new java.awt.Dimension(25, 25));
        BotonAmarillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAmarilloActionPerformed(evt);
            }
        });
        subPanelColores.add(BotonAmarillo);

        BotonVerde.setBackground(new java.awt.Color(51, 255, 0));
        buttonGroup2.add(BotonVerde);
        BotonVerde.setForeground(new java.awt.Color(102, 255, 0));
        BotonVerde.setToolTipText("Verde");
        BotonVerde.setBorder(null);
        BotonVerde.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonVerde.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BotonVerde.setMargin(new java.awt.Insets(0, 0, 0, 0));
        BotonVerde.setPreferredSize(new java.awt.Dimension(25, 25));
        BotonVerde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonVerdeActionPerformed(evt);
            }
        });
        subPanelColores.add(BotonVerde);

        BotonRojo.setBackground(new java.awt.Color(255, 0, 0));
        buttonGroup2.add(BotonRojo);
        BotonRojo.setForeground(new java.awt.Color(255, 0, 0));
        BotonRojo.setToolTipText("Rojo");
        BotonRojo.setBorder(null);
        BotonRojo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonRojo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BotonRojo.setMargin(new java.awt.Insets(0, 0, 0, 0));
        BotonRojo.setPreferredSize(new java.awt.Dimension(25, 25));
        BotonRojo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonRojoActionPerformed(evt);
            }
        });
        subPanelColores.add(BotonRojo);

        BotonAzul.setBackground(new java.awt.Color(0, 0, 255));
        buttonGroup2.add(BotonAzul);
        BotonAzul.setForeground(new java.awt.Color(0, 0, 255));
        BotonAzul.setToolTipText("Azul");
        BotonAzul.setBorder(null);
        BotonAzul.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        BotonAzul.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        BotonAzul.setMargin(new java.awt.Insets(0, 0, 0, 0));
        BotonAzul.setPreferredSize(new java.awt.Dimension(25, 25));
        BotonAzul.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonAzulActionPerformed(evt);
            }
        });
        subPanelColores.add(BotonAzul);

        PanelOpciones.add(subPanelColores);

        subPanelBrillo.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Brillo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N
        subPanelBrillo.setToolTipText("Brillo");
        subPanelBrillo.setPreferredSize(new java.awt.Dimension(150, 80));

        sliderBrillo.setToolTipText("Deslizador de brillo");
        sliderBrillo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderBrilloStateChanged(evt);
            }
        });
        sliderBrillo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderBrilloFocusLost(evt);
            }
        });

        javax.swing.GroupLayout subPanelBrilloLayout = new javax.swing.GroupLayout(subPanelBrillo);
        subPanelBrillo.setLayout(subPanelBrilloLayout);
        subPanelBrilloLayout.setHorizontalGroup(
            subPanelBrilloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sliderBrillo, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
        );
        subPanelBrilloLayout.setVerticalGroup(
            subPanelBrilloLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subPanelBrilloLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sliderBrillo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        PanelOpciones.add(subPanelBrillo);
        subPanelBrillo.getAccessibleContext().setAccessibleDescription("");

        subPanelFiltros.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Filtros", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N
        subPanelFiltros.setToolTipText("Filtros");
        subPanelFiltros.setPreferredSize(new java.awt.Dimension(120, 80));
        subPanelFiltros.setRequestFocusEnabled(false);

        menuFiltros.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Filtro media", "Filtro binomial", "Filtro enfoque", "Filtro relieve", "Filtro laplaciano" }));
        menuFiltros.setToolTipText("Menu de fltros");
        menuFiltros.setMinimumSize(new java.awt.Dimension(20, 20));
        menuFiltros.setPreferredSize(new java.awt.Dimension(20, 20));
        menuFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuFiltrosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout subPanelFiltrosLayout = new javax.swing.GroupLayout(subPanelFiltros);
        subPanelFiltros.setLayout(subPanelFiltrosLayout);
        subPanelFiltrosLayout.setHorizontalGroup(
            subPanelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subPanelFiltrosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuFiltros, 0, 88, Short.MAX_VALUE)
                .addContainerGap())
        );
        subPanelFiltrosLayout.setVerticalGroup(
            subPanelFiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(menuFiltros, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE)
        );

        PanelOpciones.add(subPanelFiltros);

        subPanelContraste.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Contraste", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N
        subPanelContraste.setToolTipText("Contrastes");
        subPanelContraste.setName(""); // NOI18N
        subPanelContraste.setPreferredSize(new java.awt.Dimension(120, 80));

        botonContraste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/contraste.png"))); // NOI18N
        botonContraste.setToolTipText("Contraste");
        botonContraste.setPreferredSize(new java.awt.Dimension(30, 50));
        botonContraste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonContrasteActionPerformed(evt);
            }
        });
        subPanelContraste.add(botonContraste);

        botonIluminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/iluminar.png"))); // NOI18N
        botonIluminar.setToolTipText("Iluminar");
        botonIluminar.setPreferredSize(new java.awt.Dimension(30, 50));
        botonIluminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIluminarActionPerformed(evt);
            }
        });
        subPanelContraste.add(botonIluminar);

        botonOscurecer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/oscurecer.png"))); // NOI18N
        botonOscurecer.setToolTipText("Oscurecer");
        botonOscurecer.setPreferredSize(new java.awt.Dimension(30, 50));
        botonOscurecer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOscurecerActionPerformed(evt);
            }
        });
        subPanelContraste.add(botonOscurecer);

        PanelOpciones.add(subPanelContraste);

        subPanelOperaciones.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Operaciones", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N
        subPanelOperaciones.setToolTipText("Operaciones");
        subPanelOperaciones.setPreferredSize(new java.awt.Dimension(300, 80));

        botonSinusoidal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/sinusoidal.png"))); // NOI18N
        botonSinusoidal.setToolTipText("Sinusoidal");
        botonSinusoidal.setPreferredSize(new java.awt.Dimension(30, 50));
        botonSinusoidal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSinusoidalActionPerformed(evt);
            }
        });
        subPanelOperaciones.add(botonSinusoidal);

        botonSepia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/sepia.png"))); // NOI18N
        botonSepia.setToolTipText("Sepía");
        botonSepia.setPreferredSize(new java.awt.Dimension(30, 50));
        botonSepia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSepiaActionPerformed(evt);
            }
        });
        subPanelOperaciones.add(botonSepia);

        botonNegativo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/if_block-copy-square-front_2203542.png"))); // NOI18N
        botonNegativo.setToolTipText("Negativo");
        botonNegativo.setPreferredSize(new java.awt.Dimension(30, 50));
        botonNegativo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonNegativoActionPerformed(evt);
            }
        });
        subPanelOperaciones.add(botonNegativo);

        botonTetrico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/draw_icon-icons.com_76846.png"))); // NOI18N
        botonTetrico.setToolTipText("Tétrico");
        botonTetrico.setPreferredSize(new java.awt.Dimension(30, 50));
        botonTetrico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTetricoActionPerformed(evt);
            }
        });
        subPanelOperaciones.add(botonTetrico);

        botonOpCaC.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/ilustracoes_04-01_icon-icons.com_75461.png"))); // NOI18N
        botonOpCaC.setToolTipText("Operación CaC");
        botonOpCaC.setPreferredSize(new java.awt.Dimension(30, 50));
        botonOpCaC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpCaCActionPerformed(evt);
            }
        });
        subPanelOperaciones.add(botonOpCaC);

        botonOpPaP.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/oo_draw_19780.png"))); // NOI18N
        botonOpPaP.setToolTipText("Operación PaP");
        botonOpPaP.setPreferredSize(new java.awt.Dimension(30, 50));
        botonOpPaP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonOpPaPActionPerformed(evt);
            }
        });
        subPanelOperaciones.add(botonOpPaP);

        botonTintado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/tintar.png"))); // NOI18N
        botonTintado.setToolTipText("Tintar");
        botonTintado.setPreferredSize(new java.awt.Dimension(30, 50));
        botonTintado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonTintadoActionPerformed(evt);
            }
        });
        subPanelOperaciones.add(botonTintado);

        botonEcualizacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/ecualizar.png"))); // NOI18N
        botonEcualizacion.setToolTipText("Ecualizar");
        botonEcualizacion.setPreferredSize(new java.awt.Dimension(30, 50));
        botonEcualizacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEcualizacionActionPerformed(evt);
            }
        });
        subPanelOperaciones.add(botonEcualizacion);

        PanelOpciones.add(subPanelOperaciones);

        subPanelColor.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Color", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 255))); // NOI18N
        subPanelColor.setToolTipText("Color");
        subPanelColor.setPreferredSize(new java.awt.Dimension(140, 80));

        botonBandas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/bandas.png"))); // NOI18N
        botonBandas.setToolTipText("Bandas");
        botonBandas.setPreferredSize(new java.awt.Dimension(30, 50));
        botonBandas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonBandasActionPerformed(evt);
            }
        });
        subPanelColor.add(botonBandas);

        menuEspacioColor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "sRGB", "sYCC", "sGREY" }));
        menuEspacioColor.setToolTipText("Menu de espacios de color");
        menuEspacioColor.setPreferredSize(new java.awt.Dimension(80, 50));
        menuEspacioColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuEspacioColorActionPerformed(evt);
            }
        });
        subPanelColor.add(menuEspacioColor);

        PanelOpciones.add(subPanelColor);

        subPanelRotacion.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Rotación", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N
        subPanelRotacion.setToolTipText("Rotación");
        subPanelRotacion.setPreferredSize(new java.awt.Dimension(230, 80));

        sliderRotacion.setMaximum(360);
        sliderRotacion.setPaintTicks(true);
        sliderRotacion.setToolTipText("Deslizador para rotar");
        sliderRotacion.setValue(0);
        sliderRotacion.setPreferredSize(new java.awt.Dimension(100, 26));
        sliderRotacion.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderRotacionStateChanged(evt);
            }
        });
        sliderRotacion.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                sliderRotacionFocusLost(evt);
            }
        });
        subPanelRotacion.add(sliderRotacion);

        boton90.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/rotacion90.png"))); // NOI18N
        boton90.setToolTipText("Rotar 90º ");
        boton90.setPreferredSize(new java.awt.Dimension(30, 50));
        boton90.setRequestFocusEnabled(false);
        boton90.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton90ActionPerformed(evt);
            }
        });
        subPanelRotacion.add(boton90);

        boton180.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/rotacion180.png"))); // NOI18N
        boton180.setToolTipText("Rotar 180º");
        boton180.setPreferredSize(new java.awt.Dimension(30, 50));
        boton180.setRequestFocusEnabled(false);
        boton180.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton180ActionPerformed(evt);
            }
        });
        subPanelRotacion.add(boton180);

        boton270.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/rotacion270.png"))); // NOI18N
        boton270.setToolTipText("Rotar 270º");
        boton270.setPreferredSize(new java.awt.Dimension(30, 50));
        boton270.setRequestFocusEnabled(false);
        boton270.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boton270ActionPerformed(evt);
            }
        });
        subPanelRotacion.add(boton270);

        PanelOpciones.add(subPanelRotacion);

        subPanelEscala.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Escala", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 51, 204))); // NOI18N
        subPanelEscala.setToolTipText("Escala");
        subPanelEscala.setPreferredSize(new java.awt.Dimension(90, 80));

        botonMas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/aumentar.png"))); // NOI18N
        botonMas.setToolTipText("Aumentar");
        botonMas.setPreferredSize(new java.awt.Dimension(30, 50));
        botonMas.setRequestFocusEnabled(false);
        botonMas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMasActionPerformed(evt);
            }
        });
        subPanelEscala.add(botonMas);

        botonMenos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/disminuir.png"))); // NOI18N
        botonMenos.setToolTipText("Disminuir");
        botonMenos.setPreferredSize(new java.awt.Dimension(30, 50));
        botonMenos.setRequestFocusEnabled(false);
        botonMenos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMenosActionPerformed(evt);
            }
        });
        subPanelEscala.add(botonMenos);

        PanelOpciones.add(subPanelEscala);

        PanelColoresEstado.add(PanelOpciones, java.awt.BorderLayout.CENTER);

        PanelEstado.setBackground(new java.awt.Color(255, 255, 255));
        PanelEstado.setFont(new java.awt.Font("Segoe UI Symbol", 1, 11)); // NOI18N
        PanelEstado.setForeground(new java.awt.Color(0, 0, 204));
        PanelEstado.setText("Estado");
        PanelEstado.setToolTipText("Barra de estado");
        PanelEstado.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        PanelColoresEstado.add(PanelEstado, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(PanelColoresEstado, java.awt.BorderLayout.PAGE_END);

        escritorio.setBackground(new java.awt.Color(255, 0, 0));
        escritorio.setToolTipText("Escritorio");
        escritorio.setPreferredSize(new java.awt.Dimension(30, 50));
        escritorio.setRequestFocusEnabled(false);

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1332, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        getContentPane().add(escritorio, java.awt.BorderLayout.CENTER);

        BarraMenu.setToolTipText("Barra de opciones");

        ArchivoMenu.setBorder(null);
        ArchivoMenu.setForeground(new java.awt.Color(0, 0, 255));
        ArchivoMenu.setText("Archivo ");
        ArchivoMenu.setToolTipText("Menú de archivo");
        ArchivoMenu.setPreferredSize(new java.awt.Dimension(48, 19));

        NuevoArchivoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        NuevoArchivoMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/nuevo.png"))); // NOI18N
        NuevoArchivoMenu.setText("Nuevo lienzo");
        NuevoArchivoMenu.setToolTipText("Nuevo dibujo");
        NuevoArchivoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NuevoArchivoMenuActionPerformed(evt);
            }
        });
        ArchivoMenu.add(NuevoArchivoMenu);

        AbrirArchivoMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/abrir.png"))); // NOI18N
        AbrirArchivoMenu.setText("Abrir archivo");
        AbrirArchivoMenu.setToolTipText("Abrir archivo");
        AbrirArchivoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirArchivoMenuActionPerformed(evt);
            }
        });
        ArchivoMenu.add(AbrirArchivoMenu);

        GuardarArchivoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        GuardarArchivoMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/Guardar.gif"))); // NOI18N
        GuardarArchivoMenu.setText("Guardar archivo");
        GuardarArchivoMenu.setToolTipText("Guardar archivo");
        GuardarArchivoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GuardarArchivoMenuActionPerformed(evt);
            }
        });
        ArchivoMenu.add(GuardarArchivoMenu);

        AcercaMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/codingbrowser_102152.png"))); // NOI18N
        AcercaMenu.setText("Acerca de");
        AcercaMenu.setToolTipText("Acerca de ...");
        AcercaMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AcercaMenuActionPerformed(evt);
            }
        });
        ArchivoMenu.add(AcercaMenu);

        BarraMenu.add(ArchivoMenu);

        MusicaMenu.setForeground(new java.awt.Color(0, 0, 204));
        MusicaMenu.setText("Sonido");
        MusicaMenu.setToolTipText("Menú de música");

        GrabarAudioMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        GrabarAudioMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/record24x24.png"))); // NOI18N
        GrabarAudioMenu.setText("Grabar Audio");
        GrabarAudioMenu.setToolTipText("Grabar audio");
        GrabarAudioMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrabarAudioMenuActionPerformed(evt);
            }
        });
        MusicaMenu.add(GrabarAudioMenu);

        BarraMenu.add(MusicaMenu);

        VideoMenu.setForeground(new java.awt.Color(0, 0, 255));
        VideoMenu.setToolTipText("Menú de video");

        AbrirVideoMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        AbrirVideoMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/AbrirVideo.png"))); // NOI18N
        AbrirVideoMenu.setText("abrir_video (no usar)");
        AbrirVideoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AbrirVideoMenuActionPerformed(evt);
            }
        });
        VideoMenu.add(AbrirVideoMenu);

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/AbrirVideo.png"))); // NOI18N
        jMenuItem1.setText("abrir_video (no usar)");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        VideoMenu.add(jMenuItem1);

        BarraMenu.add(VideoMenu);

        EdicionMenu.setBorder(null);
        EdicionMenu.setForeground(new java.awt.Color(0, 0, 204));
        EdicionMenu.setText("Ver");
        EdicionMenu.setToolTipText("Menú Ver");

        EstadoEdicionMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        EstadoEdicionMenu.setSelected(true);
        EstadoEdicionMenu.setText("Ver barra de estado");
        EstadoEdicionMenu.setToolTipText("");
        EstadoEdicionMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/Texto.gif"))); // NOI18N
        EstadoEdicionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EstadoEdicionMenuActionPerformed(evt);
            }
        });
        EdicionMenu.add(EstadoEdicionMenu);

        FormasEdicionMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        FormasEdicionMenu.setSelected(true);
        FormasEdicionMenu.setText("Ver barra de formas");
        FormasEdicionMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/Texto.gif"))); // NOI18N
        FormasEdicionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FormasEdicionMenuActionPerformed(evt);
            }
        });
        EdicionMenu.add(FormasEdicionMenu);

        AtributosEdicionMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        AtributosEdicionMenu.setSelected(true);
        AtributosEdicionMenu.setText("Ver barra de atributos");
        AtributosEdicionMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/Texto.gif"))); // NOI18N
        AtributosEdicionMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtributosEdicionMenuActionPerformed(evt);
            }
        });
        EdicionMenu.add(AtributosEdicionMenu);

        BarraMenu.add(EdicionMenu);

        ImagenMenu.setBorder(null);
        ImagenMenu.setForeground(new java.awt.Color(0, 0, 204));
        ImagenMenu.setText("Herramientas");
        ImagenMenu.setToolTipText("Menú de herramientas");

        tamañoImagenMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        tamañoImagenMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/disminuir.png"))); // NOI18N
        tamañoImagenMenu.setText("Redimensionar lienzo");
        tamañoImagenMenu.setToolTipText("No implementado aún");
        tamañoImagenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tamañoImagenMenuActionPerformed(evt);
            }
        });
        ImagenMenu.add(tamañoImagenMenu);

        DuplicaImagenMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        DuplicaImagenMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos_dibujos/disminuir.png"))); // NOI18N
        DuplicaImagenMenu.setText("Duplicar");
        DuplicaImagenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DuplicaImagenMenuActionPerformed(evt);
            }
        });
        ImagenMenu.add(DuplicaImagenMenu);

        BarraMenu.add(ImagenMenu);

        setJMenuBar(BarraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NuevoArchivoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NuevoArchivoMenuActionPerformed
        // TODO add your handling code here:
        VentanaInterna lienzo = new VentanaInterna(this);

        escritorio.add(lienzo);
        lienzo.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(this.tam_ancho, this.tam_alto,BufferedImage.TYPE_INT_ARGB);
        
        img.createGraphics().setPaint(Color.white);
        img.createGraphics().fill(new Rectangle2D.Float(0.0f, 0.0f, lienzo_altura, lienzo_anchura));
        lienzo.getLienzo().setImg(img);
        
        this.PanelEstado.setText("- Creado un nuevo lienzo.");
    }//GEN-LAST:event_NuevoArchivoMenuActionPerformed

    private void EstadoEdicionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EstadoEdicionMenuActionPerformed
        // TODO add your handling code here:
        this.PanelEstado.setVisible(this.EstadoEdicionMenu.isSelected());
        if (this.PanelEstado.isVisible())
            this.PanelEstado.setText("- Barra de estado visible.");
        else
            this.PanelEstado.setText("- Barra de estado invisible.");   
    }//GEN-LAST:event_EstadoEdicionMenuActionPerformed

    private void BotonNegroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonNegroActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(Color.black);
             color_asignado = Color.black;
            if (this.botonEditar.isSelected()){
                vi.getLienzo().setColorEdit(Color.black);
            }
        }
        this.PanelEstado.setText("- Seleccionado el color negro.");
        this.repaint();
    }//GEN-LAST:event_BotonNegroActionPerformed

    private void BotonRojoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRojoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(this.BotonRojo.getBackground());
            color_asignado = Color.red;
            if (this.botonEditar.isSelected()){
                vi.getLienzo().setColorEdit(this.BotonRojo.getBackground());
            }
        }
        this.PanelEstado.setText("- Seleccionado el color rojo.");
        this.repaint();
    }//GEN-LAST:event_BotonRojoActionPerformed

    private void BotonAzulActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAzulActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(this.BotonAzul.getBackground());
            color_asignado = Color.blue;
            if (this.botonEditar.isSelected()){
                vi.getLienzo().setColorEdit(this.BotonAzul.getBackground());
            }
        }
        this.PanelEstado.setText("- Seleccionado el color azul.");
        this.repaint();
    }//GEN-LAST:event_BotonAzulActionPerformed

    private void BotonBlancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonBlancoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(this.BotonBlanco.getBackground());
            color_asignado = Color.white;
            if (this.botonEditar.isSelected()){
                vi.getLienzo().setColorEdit(this.BotonBlanco.getBackground());
            }
        }  
        this.PanelEstado.setText("- Seleccionado el color blanco.");
        this.repaint();
    }//GEN-LAST:event_BotonBlancoActionPerformed

    private void BotonVerdeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonVerdeActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(this.BotonVerde.getBackground());
            if (this.botonEditar.isSelected()){
                vi.getLienzo().setColorEdit(this.BotonVerde.getBackground());
                color_asignado = Color.green;
            }
        }
        this.PanelEstado.setText("- Seleccionado el color verde.");
        this.repaint();
    }//GEN-LAST:event_BotonVerdeActionPerformed

    private void BotonAmarilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonAmarilloActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setColor(this.BotonAmarillo.getBackground());
            color_asignado = Color.yellow;
             if (this.botonEditar.isSelected()){
                vi.getLienzo().setColorEdit(this.BotonAmarillo.getBackground());
            }
        }
        this.PanelEstado.setText("- Seleccionado el color amarillo.");
        this.repaint();
    }//GEN-LAST:event_BotonAmarilloActionPerformed

    private void BotonDibujarPuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonDibujarPuntoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
             vi.getLienzo().setForma(sm.chr.iu.Formas.PUNTO);
        }
        this.PanelEstado.setText("- Seleccionado el punto.");
        this.repaint();
    }//GEN-LAST:event_BotonDibujarPuntoActionPerformed

    private void GuardarArchivoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GuardarArchivoMenuActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            
            JFileChooser dlg = new JFileChooser();
            dlg.addChoosableFileFilter(new FileNameExtensionFilter("Imágenes " + Arrays.toString(ImageIO.getWriterFileSuffixes()), ImageIO.getWriterFormatNames()));
            int resp = dlg.showSaveDialog(this);
            
            if (resp == JFileChooser.APPROVE_OPTION) {
                
                try {
                    BufferedImage img = vi.getLienzo().getImg(true);
                    if (img != null) {
                        File f = dlg.getSelectedFile();
                        String nombre_fichero = f.getName();
                        String extension = nombre_fichero.substring(nombre_fichero.lastIndexOf(".") + 1, nombre_fichero.length());
                        if (extension.length() == 0 || ("jpg".equals(extension)) || ("bmp".equals(extension)) || ("gif".equals(extension)) || ("png".equals(extension)) || ("jpeg".equals(extension)) || ("wbmp".equals(extension))){
                            ImageIO.write(img, extension, f);
                            vi.setTitle(f.getName());
                        }else{
                            JOptionPane.showMessageDialog(null, "Formato no compatible. Pruebe: jpg, bmp, gif, png, jpeg o wbmp", "Funcion: Guardar imagen", HEIGHT);
                        }
                    }
                }catch (HeadlessException | IOException ex) {
                    System.err.println("Error al guardar la imagen.");
                }
            }  
        this.PanelEstado.setText("- Guardada una imagen."); 
        }    
    }//GEN-LAST:event_GuardarArchivoMenuActionPerformed

    private void BotonDibujarRectanguloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonDibujarRectanguloActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
           vi.getLienzo().setForma(sm.chr.iu.Formas.RECTANGULO);
        }
        this.PanelEstado.setText("- Seleccionado el rectángulo.");
        this.repaint();
    }//GEN-LAST:event_BotonDibujarRectanguloActionPerformed

    private void BotonDibujarElipseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonDibujarElipseActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.chr.iu.Formas.ELIPSE);
        }
        this.PanelEstado.setText("- Seleccionada la elipse.");
        this.repaint();
    }//GEN-LAST:event_BotonDibujarElipseActionPerformed

    private void BotonDibujarLineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonDibujarLineaActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.chr.iu.Formas.LINEA);
        }
        this.PanelEstado.setText("- Seleccionada la linea.");
        this.repaint();
    }//GEN-LAST:event_BotonDibujarLineaActionPerformed

    private void medidorGrosorStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_medidorGrosorStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            BasicStroke st = new BasicStroke((Integer) this.medidorGrosor.getValue());
            vi.getLienzo().setTrazo(st);
            if (this.botonEditar.isSelected()){
                vi.getLienzo().setGrosorEdit(st);
            }
        }
        this.PanelEstado.setText("- Seleccionado el grosor.");
        this.repaint();
    }//GEN-LAST:event_medidorGrosorStateChanged

    private void botonRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRellenoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setRelleno(this.botonRelleno.isSelected());
            if (this.botonEditar.isSelected()){
                vi.getLienzo().setRellenoEdit(this.botonRelleno.isSelected());
            }
        }
        
        if (this.botonRelleno.isSelected())
            this.PanelEstado.setText("- Con relleno.");
        else
            this.PanelEstado.setText("- Sin relleno."); 
        
        this.repaint();
    }//GEN-LAST:event_botonRellenoActionPerformed

    private void botonTransparenciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTransparenciaActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setTransparente(this.botonTransparencia.isSelected());
            if (this.botonEditar.isSelected()){
                vi.getLienzo().setTransparenciaEdit(this.botonTransparencia.isSelected());
            }
        }
        if (this.botonTransparencia.isSelected())
            this.PanelEstado.setText("- Modo transparencia activado.");
        else
            this.PanelEstado.setText("- Modo transparencia desactivado.");
        
        this.repaint();
    }//GEN-LAST:event_botonTransparenciaActionPerformed

    private void botonAlisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAlisarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setAlisado(this.botonAlisar.isSelected());
            if (this.botonEditar.isSelected()){
                vi.getLienzo().setAlisadoEdit(this.botonAlisar.isSelected());
            }
        }
        if (this.botonAlisar.isSelected())
            this.PanelEstado.setText("- Con alisado.");
        else
            this.PanelEstado.setText("- Sin alisado."); 
        
        this.repaint();
    }//GEN-LAST:event_botonAlisarActionPerformed

    private void botonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEditarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setEditar(this.botonEditar.isSelected());
        }
        if (this.botonEditar.isSelected())
            this.PanelEstado.setText("- Modo edición activado.");
        else
            this.PanelEstado.setText("- Modo edición desactivado."); 
        
        this.repaint();
    }//GEN-LAST:event_botonEditarActionPerformed

    private void nuevoDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoDibujoActionPerformed
        // TODO add your handling code here:
        VentanaInterna lienzo = new VentanaInterna(this);

        escritorio.add(lienzo);
        lienzo.setVisible(true);
        BufferedImage img;
        img = new BufferedImage(this.tam_ancho, this.tam_alto,BufferedImage.TYPE_INT_ARGB);
        
        img.createGraphics().setPaint(Color.white);
        img.createGraphics().fill(new Rectangle2D.Float(0.0f, 0.0f, lienzo_altura, lienzo_anchura));
        lienzo.getLienzo().setImg(img);
        
        this.PanelEstado.setText("- Creado un nuevo lienzo.");
    }//GEN-LAST:event_nuevoDibujoActionPerformed

    private void guardarDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarDibujoActionPerformed
        // TODO add your handling code here:
                VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            
            JFileChooser dlg = new JFileChooser();
            dlg.addChoosableFileFilter(new FileNameExtensionFilter("Imágenes " + Arrays.toString(ImageIO.getWriterFileSuffixes()), ImageIO.getWriterFormatNames()));
            int resp = dlg.showSaveDialog(this);
            
            if (resp == JFileChooser.APPROVE_OPTION) {
                
                try {
                    BufferedImage img = vi.getLienzo().getImg(true);
                    if (img != null) {
                        File f = dlg.getSelectedFile();
                        String nombre_fichero = f.getName();
                        String extension = nombre_fichero.substring(nombre_fichero.lastIndexOf(".") + 1, nombre_fichero.length());
                        if (extension.length() == 0 || ("jpg".equals(extension)) || ("bmp".equals(extension)) || ("gif".equals(extension)) || ("png".equals(extension)) || ("jpeg".equals(extension)) || ("wbmp".equals(extension))){
                            ImageIO.write(img, extension, f);
                            vi.setTitle(f.getName());
                        }else{
                            JOptionPane.showMessageDialog(null, "Formato no compatible. Pruebe: jpg, bmp, gif, png, jpeg o wbmp", "Funcion: Guardar imagen", HEIGHT);
                        }
                    }
                }catch (HeadlessException | IOException ex) {
                    System.err.println("Error al guardar la imagen.");
                }
            }  
        this.PanelEstado.setText("- Guardada una imagen."); 
        }    
    }//GEN-LAST:event_guardarDibujoActionPerformed

    private void abrirDibujoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirDibujoActionPerformed
        // TODO add your handling code here:
            
        // IMAGEN
        JFileChooser dlg = new JFileChooser();
        dlg.setFileFilter(new FileNameExtensionFilter("Imágenes compatibles: jpg, bmp, gif, png, wbmp, jpeg","jpg","gif","png","wbmp","jpeg"));
        dlg.setFileFilter(new FileNameExtensionFilter("Audios compatibles: wav, mid, au", "wav","mid","au"));
        dlg.setFileFilter(new FileNameExtensionFilter("Videos compatibles(JMF): avi, gsm, mpg, mp2, mov", "avi", "gsm", "mpg", "mp2", "mov"));
        dlg.addChoosableFileFilter(new FileNameExtensionFilter("Videos compatibles(VLC): avi, mpg, mpeg, mov, mp4", "avi", "mp4","mpg", "mpeg", "mov"));
        int resp = dlg.showOpenDialog(this);
            if( resp == JFileChooser.APPROVE_OPTION) {
                
                try{
                File f = dlg.getSelectedFile();
                String nombre_fichero = f.getName();
                String extension = nombre_fichero.substring(nombre_fichero.lastIndexOf(".") + 1, nombre_fichero.length());
                
                // IMÁGENES
                if (("jpg".equals(extension)) || ("bmp".equals(extension)) || ("gif".equals(extension)) || ("png".equals(extension)) || ("wbmp".equals(extension)) || ("jpeg".equals(extension))){
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna(this);
                    vi.getLienzo().setImg(img);
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                    this.PanelEstado.setText("Imagen abierta");
                }
                // SONIDO
                if (("wav".equals(extension)) || ("mid".equals(extension)) || ("au".equals(extension))){
                    File g = new File( f.getAbsolutePath() ){
                    @Override
                        public String toString(){
                        return this.getName();
                        }
                    };
                    listaReproduccion.addItem(g);
                    listaReproduccion.setSelectedItem(g);
                    this.PanelEstado.setText("Audio abierto");
        
                }
                // VIDEO JMF
                if (("avi".equals(extension)) || ("gsm".equals(extension)) || ("mpg".equals(extension)) || ("mp2".equals(extension)) || ("mov".equals(extension))){
                    VentanaInternaJMFPlayer v = VentanaInternaJMFPlayer.getInstance(f);
                    this.escritorio.add(v);
                    v.setVisible(true);
                    v.setTitle(f.getName());
                    this.PanelEstado.setText("Video abierto");
                }
                // VIDEO VLC
                if (("mpeg".equals(extension)) || ("mp4".equals(extension))){
                    VentanaInternaVLCPlayer vlc = new VentanaInternaVLCPlayer(f);
                    this.escritorio.add(vlc);
                    vlc.setTitle(f.getName());
                    vlc.setVisible(true);
                    this.PanelEstado.setText("Video abierto");
                }

                }catch(IOException ex){
                    JOptionPane.showMessageDialog(null, "Error de lectura. Compruebe el fichero seleccionado.");
                    System.err.println("No se pudo leer el fichero");
                }
            }
        this.PanelEstado.setText("- Abierto un archivo.");
    }//GEN-LAST:event_abrirDibujoActionPerformed

    private void AtributosEdicionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtributosEdicionMenuActionPerformed
        // TODO add your handling code here:
        this.PanelOpciones.setVisible(this.AtributosEdicionMenu.isSelected());
        if (this.PanelOpciones.isVisible())
        this.PanelEstado.setText("- Barra de atributos visible.");
        else
        this.PanelEstado.setText("- Barra de atributos invisible");
    }//GEN-LAST:event_AtributosEdicionMenuActionPerformed

    private void FormasEdicionMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FormasEdicionMenuActionPerformed
        // TODO add your handling code here:
        this.BarraHerramientas.setVisible(this.FormasEdicionMenu.isSelected());
        if (this.BarraHerramientas.isVisible())
        this.PanelEstado.setText("- Barra de formas visible.");
        else
        this.PanelEstado.setText("- Barra de formas invisible.");
    }//GEN-LAST:event_FormasEdicionMenuActionPerformed

    private void sliderBrilloStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderBrilloStateChanged
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        RescaleOp rop;
        
        if (vi != null && this.imagen_original != null && vi instanceof VentanaInterna ){
            try    
            {
                if (this.imagen_original.getColorModel().hasAlpha()){
                    float brillo = sliderBrillo.getValue();
                    float alpha[] = {1.0f, 1.0f, 1.0f, 1.0f};
                    float beta[] = {brillo, brillo, brillo, 0.0f};
                    rop = new RescaleOp(alpha, beta, null);
                    rop.filter(imagen_original,vi.getLienzo().getImg());
                    escritorio.repaint();
                }else{
                    rop = new RescaleOp(1.0f,sliderBrillo.getValue(), null);
                    rop.filter(imagen_original,vi.getLienzo().getImg());
                    escritorio.repaint();
                }
            }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }  
        }
        this.PanelEstado.setText("- Modificando el brillo.");
    }//GEN-LAST:event_sliderBrilloStateChanged

    private void sliderBrilloFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusGained
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if(vi!=null){
            ColorModel cm = vi.getLienzo().getImg().getColorModel();
            WritableRaster raster = vi.getLienzo().getImg().copyData(null);
            boolean alfaPre = vi.getLienzo().getImg().isAlphaPremultiplied();
            imagen_original = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_sliderBrilloFocusGained

    private void sliderBrilloFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderBrilloFocusLost
        // TODO add your handling code here:
        imagen_original = null;
        sliderBrillo.setValue(50);
        repaint();
    }//GEN-LAST:event_sliderBrilloFocusLost

    private void menuFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuFiltrosActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        Kernel k = null;
        if (vi != null && vi.getLienzo().getImg()!=null) {
            try
                {
                    switch (this.menuFiltros.getSelectedIndex())
                    {
                        case 0: 
                            k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                            break;
                        case 1: 
                            k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                            break;
                        case 2:
                            k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                            break;
                        case 3:
                            k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                            break;
                        case 4: 
                            k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                            break;
                    }
                    if (k != null){
                        ConvolveOp cop = new ConvolveOp(k, ConvolveOp.EDGE_NO_OP, null);
                        vi.getLienzo().setImg(cop.filter(vi.getLienzo().getImg(), null));
                        repaint();
                    }

                }catch (IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
        }
        this.PanelEstado.setText("- Seleccionando un filtro.");
    }//GEN-LAST:event_menuFiltrosActionPerformed

    private void boton90ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton90ActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null && imagen_original != null) {
            
            imagen_original = vi.getLienzo().getImg();
  
            if (imagen_original != null) {
                
                try {
                Point punto = new Point(imagen_original.getWidth()/2, imagen_original.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(90),punto.x,punto.y);
                AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter(imagen_original, null);
                vi.getLienzo().setImg(imgdest);
                vi.repaint();
                }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }
        this.PanelEstado.setText("- Giro de 90º.");
    }//GEN-LAST:event_boton90ActionPerformed

    private void boton270ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton270ActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null && imagen_original != null) {
            
            imagen_original = vi.getLienzo().getImg();
  
            if (imagen_original != null) {
                
                try {
                Point punto = new Point(imagen_original.getWidth()/2, imagen_original.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(270),punto.x,punto.y);
                AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter(imagen_original, null);
                vi.getLienzo().setImg(imgdest);
                vi.repaint();
                }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }
        this.PanelEstado.setText("- Giro de 270º.");
    }//GEN-LAST:event_boton270ActionPerformed

    private void botonMenosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMenosActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            
            imagen_original = vi.getLienzo().getImg();
            
            try{
                
            AffineTransform at = AffineTransform.getScaleInstance(0.75,0.75);
            AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
            BufferedImage imgdest = atop.filter(imagen_original, null);
            vi.getLienzo().setImg(imgdest);
            vi.repaint();
            
            } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
            }
        }
        this.PanelEstado.setText("- Menos zoom.");
    }//GEN-LAST:event_botonMenosActionPerformed

    private void botonContrasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonContrasteActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            imagen_original = vi.getLienzo().getImg();
            if (imagen_original != null) {
                
                try {
                int type = LookupTableProducer.TYPE_SFUNCION;
                LookupTable lt = LookupTableProducer.createLookupTable(type);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter(imagen_original , imagen_original);
                escritorio.repaint();
                }catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }
        this.PanelEstado.setText("- Contraste.");
    }//GEN-LAST:event_botonContrasteActionPerformed

    private void botonIluminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIluminarActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            imagen_original = vi.getLienzo().getImg();
            if (imagen_original != null) {
                
                try {
                int type = LookupTableProducer.TYPE_LOGARITHM;
                LookupTable lt = LookupTableProducer.createLookupTable(type);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter( imagen_original , imagen_original);
                vi.repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }
        this.PanelEstado.setText("- Más contraste.");
    }//GEN-LAST:event_botonIluminarActionPerformed

    private void botonOscurecerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOscurecerActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            imagen_original = vi.getLienzo().getImg();
            if (imagen_original != null) {
                
                try {
                int type = LookupTableProducer.TYPE_POWER;
                LookupTable lt = LookupTableProducer.createLookupTable(type);
                LookupOp lop = new LookupOp(lt, null);
                lop.filter( imagen_original , imagen_original);
                escritorio.repaint();
                } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }
        this.PanelEstado.setText("- Menos contraste.");
    }//GEN-LAST:event_botonOscurecerActionPerformed

    private void botonMasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMasActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            
            imagen_original = vi.getLienzo().getImg();
            
            try{
                
            AffineTransform at = AffineTransform.getScaleInstance(1.25,1.25);
            AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
            BufferedImage imgdest = atop.filter(imagen_original, null);
            vi.getLienzo().setImg(imgdest);
            vi.repaint();
            
            } catch(Exception e){
                System.err.println(e.getLocalizedMessage());
            }
        }
        this.PanelEstado.setText("- Más zoom.");
    }//GEN-LAST:event_botonMasActionPerformed

    private void botonSinusoidalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSinusoidalActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            imagen_original = vi.getLienzo().getImg();
            if (imagen_original != null) {
                
                try {
                    LookupTable lt = seno(180.0/255.0);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imagen_original, imagen_original);
                    escritorio.repaint();
                } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }  
        this.PanelEstado.setText("- Sinusoidal.");
    }//GEN-LAST:event_botonSinusoidalActionPerformed

    private void tamañoImagenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tamañoImagenMenuActionPerformed
        // TODO add your handling code here:
        DialogoCambioTamaño.setVisible(true);
        this.PanelEstado.setText("- Redimensionar lienzo.");
    }//GEN-LAST:event_tamañoImagenMenuActionPerformed

    private void boton180ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boton180ActionPerformed
        // TODO add your handling code here:
         VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null && imagen_original != null) {
            
            imagen_original = vi.getLienzo().getImg();
  
            if (imagen_original != null) {
                
                try {   
                Point punto = new Point(imagen_original.getWidth()/2, imagen_original.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(180),punto.x,punto.y);
                AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgdest = atop.filter(imagen_original, null);
                vi.getLienzo().setImg(imgdest);
                vi.repaint();
                }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }
        this.PanelEstado.setText("- Giro 180º.");
    }//GEN-LAST:event_boton180ActionPerformed

    private void sliderRotacionStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderRotacionStateChanged
        // TODO add your handling code here:
    VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
    if (vi != null && this.sliderRotacion.hasFocus()) {
        
        try {
            Point punto = new Point(imagen_original.getWidth()/2, imagen_original.getHeight()/2);
            double gr = Math.toRadians(this.sliderRotacion.getValue());
            AffineTransform at = AffineTransform.getRotateInstance(gr,punto.x,punto.y);
            AffineTransformOp atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
            BufferedImage imgdest = atop.filter(this.imagen_original, null);
            vi.getLienzo().setImg(imgdest);
            vi.repaint();
        }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
        }
    }
    this.PanelEstado.setText("- Rotaaaando.");
    }//GEN-LAST:event_sliderRotacionStateChanged

    private void DuplicaImagenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DuplicaImagenMenuActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            
            try {
                
            vi.setLocation(vi.getX() + 50, vi.getY() + 50);
            VentanaInterna copia_imagen = new VentanaInterna(this);
            BufferedImage img = vi.getLienzo().getImg(true);
            copia_imagen.getLienzo().setImg(img);
            this.escritorio.add(copia_imagen);
            copia_imagen.setTitle("Copia de" + vi.getTitle());
            copia_imagen.setVisible(true);
            
            JOptionPane.showMessageDialog(null, "Imagen duplicada satisfactoriamente", "Funcion: Duplicar la imagen", 0);
            
            }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
        this.PanelEstado.setText("- Duplicando imagen.");
    }//GEN-LAST:event_DuplicaImagenMenuActionPerformed

    private void sliderRotacionFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusGained
        // TODO add your handling code here:
      VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            imagen_original = vi.getLienzo().getImg();
        }
    }//GEN-LAST:event_sliderRotacionFocusGained

    private void sliderRotacionFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_sliderRotacionFocusLost
        // TODO add your handling code here:
     
    }//GEN-LAST:event_sliderRotacionFocusLost

    private void botonBandasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonBandasActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {

             imagen_original = vi.getLienzo().getImg();
             
             try {
                if(imagen_original != null){
                    
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ComponentColorModel cm = new ComponentColorModel(cs, false, false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);
                    for(int iBanda = 0; iBanda < imagen_original.getRaster().getNumBands(); iBanda++){
                        
                        int bandList[] = {iBanda}; 
                        WritableRaster bandRaster = (WritableRaster)imagen_original.getRaster().createWritableChild(0,0,imagen_original.getWidth(), imagen_original.getHeight(), 0, 0, bandList);
                        BufferedImage imgBanda = new BufferedImage(cm, bandRaster, false, null);
                    
                        VentanaInterna nueva = new VentanaInterna(this);
                        nueva.setTitle(" Banda " + iBanda + " de " + vi.getTitle());
                        nueva.getLienzo().setImg(imgBanda);
                        this.escritorio.add(nueva);
                        nueva.setVisible(true);
                    }
                    escritorio.repaint();
                }     
            }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
        this.PanelEstado.setText("- Obteniendo bandas.");
    }//GEN-LAST:event_botonBandasActionPerformed

    private void menuEspacioColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuEspacioColorActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        VentanaInterna nuevo_espacio = new VentanaInterna(this);
        
        if(vi != null){
            imagen_original = vi.getLienzo().getImg();
            
            try{
                if(imagen_original != null){
                    switch (menuEspacioColor.getSelectedIndex()) {

                        case 0:
                            if (imagen_original.getColorModel().getColorSpace().isCS_sRGB()) {
                                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                                ColorConvertOp cop = new ColorConvertOp(cs, null);
                                BufferedImage imgOut = cop.filter(imagen_original, null);
                                
                                nuevo_espacio.setTitle(vi.getTitle() + " - RGB" );
                                nuevo_espacio.setVisible(true);
                                nuevo_espacio.getLienzo().setImg(imgOut);
                                escritorio.add(nuevo_espacio);
                            }
                            else{
                                JOptionPane.showMessageDialog(null, "La imagen ya es RGB", "Funcion: Espacios de color", 0);
                            }
                            break;

                        case 1:
                            if (imagen_original.getColorModel().getColorSpace().isCS_sRGB()) {
                                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                                ColorConvertOp cop = new ColorConvertOp(cs, null);
                                BufferedImage imgOut = cop.filter(imagen_original, null);
                                
                                nuevo_espacio.setTitle(vi.getTitle() + " - YCC" );
                                nuevo_espacio.getLienzo().setImg(imgOut);
                                nuevo_espacio.setVisible(true);
                                escritorio.add(nuevo_espacio);
                            }
                            else{
                                JOptionPane.showMessageDialog(null, "La imagen ya es YCC", "Funcion: Espacios de color", 0);
                            }
                            break;

                        case 2:
                            if (imagen_original.getRaster().getNumBands()!= 1) {
                                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                                ColorConvertOp cop = new ColorConvertOp(cs, null);
                                BufferedImage imgOut = cop.filter(imagen_original, null);
                                
                                nuevo_espacio.setTitle(vi.getTitle() + " - GREY" );
                                nuevo_espacio.getLienzo().setImg(imgOut);
                                nuevo_espacio.setVisible(true);
                                escritorio.add(nuevo_espacio);
                            }
                            else{
                                JOptionPane.showMessageDialog(null, "La imagen ya es GREY", "Funcion: Espacios de color", 0);
                            }
                            break;
                    }
                repaint();
                }
            }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
        this.PanelEstado.setText("- Cambiando el espacio de color.");
    }//GEN-LAST:event_menuEspacioColorActionPerformed

    private void botonSepiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSepiaActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if(vi != null){
            try
            {
            imagen_original = vi.getLienzo().getImg();
            
            if(imagen_original != null){
                SepiaOp sepia = new SepiaOp();
                sepia.filter(imagen_original,imagen_original);
                escritorio.repaint();
            }
            
           }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
          }
            
        }
        this.PanelEstado.setText("- Sepia.");
    }//GEN-LAST:event_botonSepiaActionPerformed

    private void botonTetricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTetricoActionPerformed
        // TODO add your handling code here:
    VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            imagen_original = vi.getLienzo().getImg();
            if (imagen_original != null) {
                
                try {
                    LookupTable lt = tetrico(0.20);
                    LookupOp lop = new LookupOp(lt, null);
                    lop.filter(imagen_original, imagen_original);
                    escritorio.repaint();
                    
                } catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }  
        this.PanelEstado.setText("- Tétrico.");
    }//GEN-LAST:event_botonTetricoActionPerformed

    private void botonOpCaCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpCaCActionPerformed
        // TODO add your handling code here:
     VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
     float alfa = (float) 0.1;
        if(vi != null){
            try
            {
            imagen_original = vi.getLienzo().getImg();
            
            if(imagen_original != null){
                OpCaC cac = new OpCaC(alfa,Color.red);
                cac.filter(imagen_original,imagen_original);
                escritorio.repaint();
            }
            
           }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
          }
        }
        this.PanelEstado.setText("- Operación CaC.");
    }//GEN-LAST:event_botonOpCaCActionPerformed

    private void botonOpPaPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonOpPaPActionPerformed
        // TODO add your handling code here:
    VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if(vi != null){
            try
            {
            imagen_original = vi.getLienzo().getImg();
            
            if(imagen_original != null){
                OpPaP pap = new OpPaP();
                pap.filter(imagen_original,imagen_original);
                escritorio.repaint();
            }
            
           }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
          }
        }
        this.PanelEstado.setText("- Operación PaP.");
    }//GEN-LAST:event_botonOpPaPActionPerformed

    private void botonTintadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonTintadoActionPerformed
        // TODO add your handling code here:  
     VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if(vi != null){
            try
            {
                imagen_original = vi.getLienzo().getImg();
            
                if(imagen_original != null){
                    TintOp tintado;
                    
                    if (color_asignado != null)
                        tintado = new TintOp(color_asignado,0.5f); 
                    else
                        tintado = new TintOp(Color.black,0.5f); 
                    
                tintado.filter(imagen_original, imagen_original);
                escritorio.repaint();
                }
            
            }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
          }  
        }
        this.PanelEstado.setText("- Tintado.");
    }//GEN-LAST:event_botonTintadoActionPerformed

    private void botonEcualizacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEcualizacionActionPerformed
        // TODO add your handling code here:
    VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if(vi != null){
            try
            {
                imagen_original = vi.getLienzo().getImg();
            
                if(imagen_original != null){
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(imagen_original, imagen_original);
                    escritorio.repaint();
                }
           }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
          } 
        }
        this.PanelEstado.setText("- Ecualización.");
    }//GEN-LAST:event_botonEcualizacionActionPerformed

    private void listaReproduccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaReproduccionActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_listaReproduccionActionPerformed

    private void GrabarAudioMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrabarAudioMenuActionPerformed
        // TODO add your handling code here:
        try {
            this.audio_temporal = File.createTempFile("grabacion_temporal", ".tmp");
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
            recorder = new SMSoundRecorder(this.audio_temporal);
            botonGrabar.setSelected(true);
            recorder.record();
            
        this.PanelEstado.setText("- Grabaaaando.");
    }//GEN-LAST:event_GrabarAudioMenuActionPerformed

    private void botonGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGrabarActionPerformed
    // TODO add your handling code here:
    if (!botonGrabar.isSelected()){
            this.recorder.stop();

            JFileChooser dlg = new JFileChooser();
            dlg.setSelectedFile(new File("nombre_archivo_audio.wav"));
            dlg.setFileFilter(new FileNameExtensionFilter("Audios compatibles: wav, mid, au", "wav","mid","au"));
            
            int resp = dlg.showSaveDialog(this); 
            if (resp == JFileChooser.APPROVE_OPTION)

            try{
                
                File f = dlg.getSelectedFile();
                String nombre_fichero = f.getName();
                String extension = nombre_fichero.substring(nombre_fichero.lastIndexOf(".") + 1, nombre_fichero.length());
                
                if (extension.length() == 0 || !("wav".equals(extension)))
                    f = new File(f.getAbsoluteFile() + ".wav");

                audio_temporal.renameTo(f);
                
                File g = new File( f.getAbsolutePath() ){
                @Override
                    public String toString(){
                    return this.getName();
                    }
                };
                
                listaReproduccion.addItem(g);
                listaReproduccion.setSelectedItem(g);

            }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
          } 
    }else{
        try{
            this.PanelEstado.setText("- Grabando.");
            this.audio_temporal = File.createTempFile("grabacion_temporal", ".tmp");
            
        } catch (IOException ex){
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
            recorder = new SMSoundRecorder(this.audio_temporal);
            recorder.addLineListener(new ManejadorGrabacion());
            recorder.record();
        }
        
    }//GEN-LAST:event_botonGrabarActionPerformed

    private void botonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonPlayActionPerformed
        // TODO add your handling code here:
        File f = (File)listaReproduccion.getSelectedItem();
        if(f!=null){
            player = new SMClipPlayer(f);
            player.addLineListener(new ManejadorAudio());
            if (player != null) {
                player.play();
                this.PanelEstado.setText("Reproduciendo: " + f.getName());
            }
        }
        this.PanelEstado.setText("- Reproduciendo audio.");
    }//GEN-LAST:event_botonPlayActionPerformed

    private void botonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonStopActionPerformed
        // TODO add your handling code here:
        if (player != null) {
            player.stop();
            this.PanelEstado.setText("- Canción detenida.");
        }
    }//GEN-LAST:event_botonStopActionPerformed

    private void AbrirVideoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirVideoMenuActionPerformed
        // TODO add your handling code here:
        JFileChooser dlg = new JFileChooser();
        String extensionesVi[] = {"avi", "gsm", "mpg", "mp2", "mov"};
         dlg.addChoosableFileFilter(new FileNameExtensionFilter("Vídeo" + Arrays.toString(extensionesVi), extensionesVi));
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                VentanaInternaJMFPlayer v = VentanaInternaJMFPlayer.getInstance(f);
                this.escritorio.add(v);
                v.setVisible(true);
                v.setTitle(f.getName());
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, "Error al abrir el archivo de video");
            }
        }
    }//GEN-LAST:event_AbrirVideoMenuActionPerformed

    private void botonWebCamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonWebCamActionPerformed
        // TODO add your handling code here:
        try{
            VentanaInternaCamara webcam = new VentanaInternaCamara();
            escritorio.add(webcam);
            webcam.setVisible(true);
            webcam.setTitle("Camara WebCam");
            
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "Error al abrir la cámara.");
        }
        this.PanelEstado.setText("- Webcam activa.");
    }//GEN-LAST:event_botonWebCamActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:

        JFileChooser dlg = new JFileChooser();
        String extensionesVi[] = {"avi", "gsm", "mpg", "mp2", "mov", "mp4"};
         dlg.addChoosableFileFilter(new FileNameExtensionFilter("Video VLC [avi, mpg, mpeg, mov, mp4]", "avi", "mp4","mpg", "mpeg", "mov"));
        int resp = dlg.showOpenDialog(this);
        
        if( resp == JFileChooser.APPROVE_OPTION) {
            try{
                File f = dlg.getSelectedFile();
                VentanaInternaVLCPlayer vlc = new VentanaInternaVLCPlayer(f);
                    this.escritorio.add(vlc);
                    vlc.setTitle(f.getName());
                    vlc.setVisible(true);
            }
            catch(Exception ex){
                System.err.println("Error al abrir el video " + ex);
            }
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void botonCapturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCapturarActionPerformed
        // TODO add your handling code here:
        JInternalFrame vw = this.escritorio.getSelectedFrame();
        
        if (vw != null) {
            
            try{
                
            BufferedImage img = null;
            if (vw instanceof VentanaInternaCamara) {
                img = ((VentanaInternaCamara) vw).getCamera().getImage();
            } else if (vw instanceof VentanaInternaVLCPlayer) {
                img = ((VentanaInternaVLCPlayer) vw).capturaVideo();
            } else if (vw instanceof VentanaInternaJMFPlayer) {
                 img = ((VentanaInternaJMFPlayer) vw).getFrame((Player) player);
            }

            VentanaInterna vi = new VentanaInterna(this);
            vi.getLienzo().setImg(img);
            this.escritorio.add(vi);
            vi.setLocation(vw.getX() + 25, vw.getY() + 25);
            vi.setTitle("Captura de pantalla");
            vi.setVisible(true);
            
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, "No es posible hacer una captura de pantalla.");
                System.err.println("No es posible hacer una captura de pantalla.");
            }
        }
        this.PanelEstado.setText("- Capturando pantalla.");
    }//GEN-LAST:event_botonCapturarActionPerformed

    private void AbrirArchivoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AbrirArchivoMenuActionPerformed
        // TODO add your handling code here:
           
        // IMAGEN
        JFileChooser dlg = new JFileChooser();
        dlg.setFileFilter(new FileNameExtensionFilter("Imágenes compatibles: jpg, bmp, gif, png, wbmp, jpeg","jpg","gif","png","wbmp","jpeg"));
        dlg.setFileFilter(new FileNameExtensionFilter("Audios compatibles: wav, mid, au", "wav","mid","au"));
        dlg.setFileFilter(new FileNameExtensionFilter("Videos compatibles(JMF): avi, gsm, mpg, mp2, mov", "avi", "gsm", "mpg", "mp2", "mov"));
        dlg.addChoosableFileFilter(new FileNameExtensionFilter("Videos compatibles(VLC): avi, mpg, mpeg, mov, mp4", "avi", "mp4","mpg", "mpeg", "mov"));
        int resp = dlg.showOpenDialog(this);
            if( resp == JFileChooser.APPROVE_OPTION) {
                
                try{
                File f = dlg.getSelectedFile();
                String nombre_fichero = f.getName();
                String extension = nombre_fichero.substring(nombre_fichero.lastIndexOf(".") + 1, nombre_fichero.length());
                
                // IMÁGENES
                if (("jpg".equals(extension)) || ("bmp".equals(extension)) || ("gif".equals(extension)) || ("png".equals(extension)) || ("wbmp".equals(extension)) || ("jpeg".equals(extension))){
                    BufferedImage img = ImageIO.read(f);
                    VentanaInterna vi = new VentanaInterna(this);
                    vi.getLienzo().setImg(img);
                    this.escritorio.add(vi);
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                    this.PanelEstado.setText("Imagen abierta");
                }
                // SONIDO
                if (("wav".equals(extension)) || ("mid".equals(extension)) || ("au".equals(extension))){
                    File g = new File( f.getAbsolutePath() ){
                    @Override
                        public String toString(){
                        return this.getName();
                        }
                    };
                    listaReproduccion.addItem(g);
                    listaReproduccion.setSelectedItem(g);
                    this.PanelEstado.setText("Audio abierto");
        
                }
                // VIDEO JMF
                if (("avi".equals(extension)) || ("gsm".equals(extension)) || ("mpg".equals(extension)) || ("mp2".equals(extension)) || ("mov".equals(extension))){
                    VentanaInternaJMFPlayer v = VentanaInternaJMFPlayer.getInstance(f);
                    this.escritorio.add(v);
                    v.setVisible(true);
                    v.setTitle(f.getName());
                    this.PanelEstado.setText("Video abierto");
                }
                // VIDEO VLC
                if (("mpeg".equals(extension)) || ("mp4".equals(extension))){
                    VentanaInternaVLCPlayer vlc = new VentanaInternaVLCPlayer(f);
                    this.escritorio.add(vlc);
                    vlc.setTitle(f.getName());
                    vlc.setVisible(true);
                    this.PanelEstado.setText("Video abierto");
                }

                }catch(IOException ex){
                    JOptionPane.showMessageDialog(null, "Error de lectura. Compruebe el fichero seleccionado.");
                    System.err.println("No se pudo leer el fichero");
                }
            }
        this.PanelEstado.setText("- Abierto un archivo.");
    }//GEN-LAST:event_AbrirArchivoMenuActionPerformed

    private void AcercaMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AcercaMenuActionPerformed
        // TODO add your handling code here:
      DialogoInfo.setVisible(true);
      this.PanelEstado.setText("- Acerca de Chris.");
    }//GEN-LAST:event_AcercaMenuActionPerformed

    private void botonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCerrarActionPerformed
        // TODO add your handling code here:
        DialogoInfo.dispose();
        this.PanelEstado.setText("- Dialogo cerrado.");
    }//GEN-LAST:event_botonCerrarActionPerformed

    private void botonCambiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCambiarActionPerformed
        // TODO add your handling code here:
        int ancho_nuevo = Integer.parseInt(EntradaAncho.getText());
        int alto_nuevo = Integer.parseInt(EntradaAlto.getText());
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        
        if (vi != null){
            try{
            this.lienzo_altura = ancho_nuevo;
            this.lienzo_anchura = alto_nuevo;
            this.repaint();
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, "No hay ventana activa.");
                System.err.println("No se puede redimensionar.");
            }
        }
        this.PanelEstado.setText("- Redimensionado.");
    }//GEN-LAST:event_botonCambiarActionPerformed

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        // TODO add your handling code here:
        DialogoCambioTamaño.dispose();
        this.PanelEstado.setText("- Dialogo cerrado.");
    }//GEN-LAST:event_botonCancelarActionPerformed

    private void botonDelanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDelanteActionPerformed
        // TODO add your handling code here:
    VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().Up();
            vi.getLienzo().setEditar(this.botonEditar.isSelected());
        }
        if (this.botonDelante.isSelected())
            this.PanelEstado.setText("- Delante.");
        
        this.repaint();
    }//GEN-LAST:event_botonDelanteActionPerformed

    private void botonAbajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAbajoActionPerformed
        // TODO add your handling code here:
         // TODO add your handling code here:
    VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().Down();
            vi.getLienzo().setEditar(this.botonEditar.isSelected());
        }
        if (this.botonAbajo.isSelected())
            this.PanelEstado.setText("- Atrás.");
        
        this.repaint();
    }//GEN-LAST:event_botonAbajoActionPerformed

    private void botonFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonFirstActionPerformed
        // TODO add your handling code here:
     VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().UpAll();
            vi.getLienzo().setEditar(this.botonEditar.isSelected());
        }
        if (this.botonFirst.isSelected())
            this.PanelEstado.setText("- Primero.");
        
        this.repaint();
    }//GEN-LAST:event_botonFirstActionPerformed

    private void botonLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLastActionPerformed
        // TODO add your handling code here:
     VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().DownAll();
        }
        if (this.botonLast.isSelected())
            this.PanelEstado.setText("- Último.");
        
        this.repaint();
    }//GEN-LAST:event_botonLastActionPerformed

    private void BotonRotoDosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonRotoDosActionPerformed
        // TODO add your handling code here:
    VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
           vi.getLienzo().setForma(sm.chr.iu.Formas.ROTODOS);
        }
        this.PanelEstado.setText("- Seleccionado la forma personal.");
        
        this.repaint();
    }//GEN-LAST:event_BotonRotoDosActionPerformed

    private void EntradaAnchoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EntradaAnchoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EntradaAnchoActionPerformed

    private void EntradaAltoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EntradaAltoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EntradaAltoActionPerformed

    private void botonNegativoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonNegativoActionPerformed
        // TODO add your handling code here:
        VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            imagen_original = vi.getLienzo().getImg();
            if(imagen_original!=null){
                
                try{
                    byte f[] = new byte[256];
                    for (int i=0; i<256; i++)
                    f[i] = (byte)(255-i); // Negativo
                    ByteLookupTable lt = new ByteLookupTable(0, f);
                    LookupOp lop = new LookupOp(lt, null);
                    BufferedImage imgdest = lop.filter( imagen_original,null);
                    lop.filter(imagen_original, imagen_original);
                    
                    vi.getLienzo().repaint();
                    
                }catch (IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
                }
            }
        }
        this.PanelEstado.setText("- Negativo.");
    }//GEN-LAST:event_botonNegativoActionPerformed

    private void BotonCurvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonCurvaActionPerformed
        // TODO add your handling code here:
     VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.chr.iu.Formas.CURVA);
        }
        this.PanelEstado.setText("- Seleccionada la curva.");
        this.repaint();
    }//GEN-LAST:event_BotonCurvaActionPerformed

    private void BotonGPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonGPActionPerformed
        // TODO add your handling code here:
    VentanaInterna vi = (VentanaInterna) this.escritorio.getSelectedFrame();
        if (vi != null) {
            vi.getLienzo().setForma(sm.chr.iu.Formas.GP);
        }
        this.PanelEstado.setText("- Seleccionado el trazo libre.");
        this.repaint();
    }//GEN-LAST:event_BotonGPActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
    }
    
    // FUNCIÓN SENO
    public LookupTable seno(double w){
        double K = 255.0;
        byte[] lt = new byte[256];
        lt[0]=0;
        for (int i=1; i<256; i++){
            lt[i] = (byte) (K * Math.abs(Math.sin(Math.toRadians((double) i * w))));
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }

    // FUNCIÓN TÉTRICO
   public LookupTable tetrico(double w) {
        double K = 255.0;
        byte[] lt = new byte[256];
        lt[0]=0;
        for (int i=1; i<256; i++){
            if (i<=128){
             switch (i % 2) {
                case 0:
                    lt[i] = (byte) (K * Math.abs(Math.sin(Math.toRadians((double) (w/i)-5.0))));
                    break;
                case 1:
                    lt[i] = (byte) (K * Math.abs(Math.sin(Math.toRadians((double) (w/i)+5.0))));
                    break;
             }
             }else{
                    lt[i] = (byte) (K * Math.abs(Math.sin(Math.toRadians((double) i * w))));
             }
        }
        ByteLookupTable slt = new ByteLookupTable(0, lt);
        return slt;
    }
   
    // MANEJADOR AUDIO
    public class ManejadorAudio implements LineListener {
      
        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                botonPlay.setEnabled(false);
            }
            if (event.getType() == LineEvent.Type.STOP) {
                botonPlay.setEnabled(true);
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
            }
        }
    }
    
    // MANEJADOR GRABACIÓN
    public class ManejadorGrabacion implements LineListener {
      
        @Override
        public void update(LineEvent event) {
            if (event.getType() == LineEvent.Type.START) {
                PanelEstado.setText("- Grabando.");
            }       
            if (event.getType() == LineEvent.Type.STOP) {
            }
            if (event.getType() == LineEvent.Type.CLOSE) {
                PanelEstado.setText("- Fin de la grabación.");
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AbrirArchivoMenu;
    private javax.swing.JMenuItem AbrirVideoMenu;
    private javax.swing.JMenuItem AcercaMenu;
    private javax.swing.JMenu ArchivoMenu;
    private javax.swing.JCheckBoxMenuItem AtributosEdicionMenu;
    private javax.swing.JToolBar BarraHerramientas;
    private javax.swing.JMenuBar BarraMenu;
    protected javax.swing.JToggleButton BotonAmarillo;
    protected javax.swing.JToggleButton BotonAzul;
    protected javax.swing.JToggleButton BotonBlanco;
    protected javax.swing.JToggleButton BotonCurva;
    protected javax.swing.JToggleButton BotonDibujarElipse;
    protected javax.swing.JToggleButton BotonDibujarLinea;
    protected javax.swing.JToggleButton BotonDibujarPunto;
    protected javax.swing.JToggleButton BotonDibujarRectangulo;
    protected javax.swing.JToggleButton BotonGP;
    protected javax.swing.JToggleButton BotonNegro;
    protected javax.swing.JToggleButton BotonRojo;
    protected javax.swing.JToggleButton BotonRotoDos;
    protected javax.swing.JToggleButton BotonVerde;
    private javax.swing.JDialog DialogoCambioTamaño;
    private javax.swing.JDialog DialogoInfo;
    private javax.swing.JMenuItem DuplicaImagenMenu;
    private javax.swing.JMenu EdicionMenu;
    private javax.swing.JTextField EntradaAlto;
    private javax.swing.JTextField EntradaAncho;
    private javax.swing.JCheckBoxMenuItem EstadoEdicionMenu;
    private javax.swing.JCheckBoxMenuItem FormasEdicionMenu;
    private javax.swing.JMenuItem GrabarAudioMenu;
    private javax.swing.JMenuItem GuardarArchivoMenu;
    private javax.swing.JMenu ImagenMenu;
    private javax.swing.JMenu MusicaMenu;
    private javax.swing.JMenuItem NuevoArchivoMenu;
    private javax.swing.JPanel PanelColoresEstado;
    private javax.swing.JLabel PanelEstado;
    private javax.swing.JPanel PanelOpciones;
    protected javax.swing.JLabel PanelXY;
    private javax.swing.JMenu VideoMenu;
    private javax.swing.JButton abrirDibujo;
    private javax.swing.JButton boton180;
    private javax.swing.JButton boton270;
    private javax.swing.JButton boton90;
    private javax.swing.JButton botonAbajo;
    protected javax.swing.JToggleButton botonAlisar;
    private javax.swing.JButton botonBandas;
    private javax.swing.JButton botonCambiar;
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonCapturar;
    private javax.swing.JButton botonCerrar;
    private javax.swing.JButton botonContraste;
    private javax.swing.JButton botonDelante;
    private javax.swing.JButton botonEcualizacion;
    protected javax.swing.JToggleButton botonEditar;
    private javax.swing.JButton botonFirst;
    protected javax.swing.JToggleButton botonGrabar;
    private javax.swing.JButton botonIluminar;
    private javax.swing.JButton botonLast;
    private javax.swing.JButton botonMas;
    private javax.swing.JButton botonMenos;
    private javax.swing.JButton botonNegativo;
    private javax.swing.JButton botonOpCaC;
    private javax.swing.JButton botonOpPaP;
    private javax.swing.JButton botonOscurecer;
    protected javax.swing.JButton botonPlay;
    protected javax.swing.JToggleButton botonRelleno;
    private javax.swing.JButton botonSepia;
    private javax.swing.JButton botonSinusoidal;
    protected javax.swing.JButton botonStop;
    private javax.swing.JButton botonTetrico;
    private javax.swing.JButton botonTintado;
    protected javax.swing.JToggleButton botonTransparencia;
    private javax.swing.JButton botonWebCam;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JButton guardarDibujo;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator12;
    private javax.swing.JToolBar.Separator jSeparator13;
    private javax.swing.JToolBar.Separator jSeparator14;
    private javax.swing.JToolBar.Separator jSeparator15;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private java.awt.Label label1;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private javax.swing.JComboBox<File> listaReproduccion;
    protected javax.swing.JSpinner medidorGrosor;
    private javax.swing.JComboBox<String> menuEspacioColor;
    private javax.swing.JComboBox<String> menuFiltros;
    private javax.swing.JButton nuevoDibujo;
    private javax.swing.JSlider sliderBrillo;
    private javax.swing.JSlider sliderRotacion;
    private javax.swing.JPanel subPanelBrillo;
    private javax.swing.JPanel subPanelColor;
    private javax.swing.JPanel subPanelColores;
    private javax.swing.JPanel subPanelContraste;
    private javax.swing.JPanel subPanelEscala;
    private javax.swing.JPanel subPanelFiltros;
    private javax.swing.JPanel subPanelOperaciones;
    private javax.swing.JPanel subPanelRotacion;
    private javax.swing.JMenuItem tamañoImagenMenu;
    // End of variables declaration//GEN-END:variables
}
